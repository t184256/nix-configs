#!/usr/bin/env bash

set -uexo pipefail

# TODO: get rid of persistent /home

### Parameters ###

: "${BOOT_SIZE:=1024MiB}"
: "${ROOT_SIZE:=200GiB}"
: "${ALT_SIZE:=230GiB}"
: "${ASWAP_SIZE:=20GiB}"
: "${SWAP_SIZE:=20GiB}"
: "${HOST:=JUJUBE}"
: "${COPY_ETC_NIXOS:=1}"
: "${DISK:=/dev/nvme0n1}"
: "${DISK_PART_INFIX:=p}"
: "${AUTOPART:=0}"
: "${PASSPHRASE:=}"
: "${PRODUCT_UUID:=03000200-0400-0500-0006-000700080009}"
: "${DISK_MODEL:=Disk model: One-Netbook PCI-E}"
: "${DISK_SECTORS:=125026902}"

### Safeguards ###

[[ "$(sudo cat /sys/devices/virtual/dmi/id/product_uuid)" == "$PRODUCT_UUID" ]]
[[ -e $DISK ]]


### Helpers ###

calc() { EXPR=$1
	[[ -e /tmp/.qalculate ]] || \
		nix build 'nixpkgs#libqalculate' --out-link /tmp/.qalculate
	RESULT=$(/tmp/.qalculate/bin/qalc -t "$EXPR to MiB")
	echo "${RESULT// /}"
}


### Cleanup ###

cleanup() {
	sudo umount /mnt/0 2>/dev/null || true
	sudo umount /mnt/tgt/home 2>/dev/null || true
	sudo umount /mnt/tgt/nix 2>/dev/null || true
	sudo umount /mnt/tgt/persist 2>/dev/null || true
	sudo umount /mnt/persist 2>/dev/null || true
	sudo umount /mnt/tgt/dev/pts 2>/dev/null || true
	sudo umount /mnt/tgt/dev 2>/dev/null || true
	sudo umount /mnt/tgt/proc 2>/dev/null || true
	sudo umount /mnt/tgt/sys/firmware/efi/efivars 2>/dev/null || true
	sudo umount /mnt/tgt/sys 2>/dev/null || true
	sudo umount /mnt/tgt/boot/efi 2>/dev/null || true
	sudo umount -R /mnt/tgt 2>/dev/null || true
	sudo cryptsetup close ${HOST} 2>/dev/null || true
	sudo cryptsetup close ${HOST}_SWAP 2>/dev/null || true
}
trap 'set +x; cleanup' EXIT

### Obtaining passphrase ###

if [[ -z "$PASSPHRASE" ]]; then
	read -rsp 'Disk encryption passphrase: ' PASSPHRASE
fi

### Partitioning ###

PARTITIONS=$(sudo fdisk -l $DISK)
grep -F "$DISK_MODEL" <<<"$PARTITIONS"  # extra safeguard
grep -F "$DISK_SECTORS sectors" <<<"$PARTITIONS"  # extra safeguard

if grep -E '(Device|Start|End|Size|Type|Linux)' <<<"$PARTITIONS"; then
	echo 'Existing partition table found on $DISK'
	[[ -e ${DISK}${DISK_PART_INFIX}1 ]]
else
	[[ ! -e ${DISK}${DISK_PART_INFIX}1 ]]
	if [[ "$AUTOPART" != 1 ]]; then
		part_prompt='Partition table does not exist,'
		part_prompt+=' auto-partition and lose all data? [y/N] '
		read -rp "$part_prompt" CONFIRMATION
		[[ "$CONFIRMATION" == y ]]; unset CONFIRMATION
	fi
	sudo parted -s $DISK -- mklabel gpt

	sudo parted $DISK -a optimal -- mkpart primary fat32 1MiB $BOOT_SIZE
	sudo parted $DISK -- set 1 esp on
	sudo parted $DISK -- name 1 ${HOST}_BOOT

	sudo parted $DISK -a optimal -- mkpart primary \
		$BOOT_SIZE \
		$(calc "$BOOT_SIZE + $ROOT_SIZE")
	sudo parted $DISK -- name 2 ${HOST}

	sudo parted $DISK -a optimal -- mkpart primary linux-swap \
		$(calc "$BOOT_SIZE + $ROOT_SIZE") \
		$(calc "$BOOT_SIZE + $ROOT_SIZE + $SWAP_SIZE")
	sudo parted $DISK -- name 3 ${HOST}_SWAP

	sudo parted $DISK -a optimal -- mkpart primary linux-swap \
		$(calc "$BOOT_SIZE + $ROOT_SIZE + $SWAP_SIZE") \
		$(calc "$BOOT_SIZE + $ROOT_SIZE + $SWAP_SIZE + $ALT_SIZE")
	sudo parted $DISK -- name 4 ${HOST}_ALT

	sudo parted $DISK -a optimal -- mkpart primary \
		$(calc "$BOOT_SIZE + $ROOT_SIZE + $SWAP_SIZE + $ALT_SIZE") \
		$(calc "$BOOT_SIZE + $ROOT_SIZE + $SWAP_SIZE + $ALT_SIZE + $ASWAP_SIZE")
	sudo parted $DISK -- name 5 ${HOST}_ASWAP

	sudo mkfs.fat -F 32 -n ${HOST:0:6}_BOOT \
		/dev/disk/by-partlabel/${HOST}_BOOT
	sudo partprobe -s
	[[ -e /dev/disk/by-partlabel/${HOST}_BOOT ]] || sleep 1
	[[ -e /dev/disk/by-partlabel/${HOST} ]] || sleep 1
	[[ -e /dev/disk/by-partlabel/${HOST}_BOOT ]] || sleep 1
	[[ -e /dev/disk/by-partlabel/${HOST} ]] || sleep 1
	sleep 1
	sudo mkfs.fat -F 32 -n ${HOST:0:6}_BOOT \
		/dev/disk/by-partlabel/${HOST}_BOOT

	echo -n "$PASSPHRASE" | \
		sudo cryptsetup -q luksFormat \
			/dev/disk/by-partlabel/${HOST} -d-
	echo -n "$PASSPHRASE" | \
		sudo cryptsetup -q open \
			/dev/disk/by-partlabel/${HOST} ${HOST} -d-
	sudo mkfs.btrfs -f \
		-L ${HOST} /dev/mapper/${HOST}
fi

[[ -e /dev/disk/by-partlabel/${HOST}_BOOT ]]
[[ -e /dev/disk/by-partlabel/${HOST} ]]
[[ -e /dev/disk/by-partlabel/${HOST}_SWAP ]]

if [[ ! -e /dev/mapper/${HOST}_SWAP ]]; then
	echo -n "$PASSPHRASE" | \
		sudo cryptsetup -q luksFormat \
			/dev/disk/by-partlabel/${HOST}_SWAP -d-
	echo -n "$PASSPHRASE" | \
		sudo cryptsetup -q open \
			/dev/disk/by-partlabel/${HOST}_SWAP ${HOST}_SWAP -d-
	sudo mkswap -L ${HOST}_SWAP /dev/mapper/${HOST}_SWAP
fi

### Mounting and subvolume creation ###

sudo mkdir -p /mnt/0
if [[ ! -e "/dev/mapper/${HOST}" ]]; then
	echo -n "$PASSPHRASE" | \
		sudo cryptsetup -q open \
			/dev/disk/by-partlabel/${HOST} ${HOST} -d-
fi
sudo mount -t btrfs -o compress=zstd:9 /dev/mapper/${HOST} /mnt/0

[[ -e /mnt/0/nix ]] || sudo btrfs subvolume create /mnt/0/nix
[[ -e /mnt/0/home ]] || sudo btrfs subvolume create /mnt/0/home
[[ -e /mnt/0/secrets ]] || sudo btrfs subvolume create /mnt/0/secrets

sudo mkdir -p /mnt/tgt
sudo mount -t tmpfs tmpfs /mnt/tgt
sudo mkdir -p /mnt/tgt/{boot/efi,nix,home,mnt/persist}
sudo mkdir -p /mnt/persist  # hack to soothe impermanence
sudo mount --bind /mnt/0/nix /mnt/tgt/nix
sudo mount --bind /mnt/0/home /mnt/tgt/home
sudo mount --bind /mnt/0 /mnt/tgt/mnt/persist
sudo mount --bind /mnt/0 /mnt/persist  # HACK
sudo mount /dev/disk/by-partlabel/${HOST}_BOOT /mnt/tgt/boot/efi
sudo mkdir -p /mnt/tgt/{dev,proc,sys}
sudo mount --bind /dev /mnt/tgt/dev
sudo mount --bind /dev/pts /mnt/tgt/dev/pts
sudo mount --bind /proc /mnt/tgt/proc
sudo mount --bind /sys /mnt/tgt/sys
sudo mount --bind /sys/firmware/efi/efivars \
	/mnt/tgt/sys/firmware/efi/efivars

### Impermanence data injection ###

sudo mkdir -p /mnt/tgt/mnt/persist/etc
# /mnt/persist/secrets/login:
sudo mkdir -p /mnt/tgt/mnt/persist/secrets/login
if [ ! -e /mnt/tgt/mnt/persist/secrets/login/monk ]; then
	echo 'configuring `monk` user'
	mkpasswd -s <<<"$PASSPHRASE" \
		| sudo tee /mnt/tgt/mnt/persist/secrets/login/monk
	sudo chmod 600 /mnt/tgt/mnt/persist/secrets/login/monk
fi
if [ ! -e /mnt/tgt/mnt/persist/secrets/login/root ]; then
	echo 'configuring `root` user'
	mkpasswd -s <<<"$PASSPHRASE" \
		| sudo tee /mnt/tgt/mnt/persist/secrets/login/root
	sudo chmod 600 /mnt/tgt/mnt/persist/secrets/login/root
fi
# /etc/machine-id:
[[ -e /mnt/tgt/mnt/persist/etc/machine-id ]] || \
	sudo systemd-machine-id-setup --root /mnt/tgt/mnt/persist
# /etc/nixos:
if [[ "$COPY_ETC_NIXOS" == 1 ]]; then
	if git rev-parse --show-toplevel 2>/dev/null; then
		FLAKE=$(git rev-parse --show-toplevel)
		sudo rm -d /mnt/tgt/mnt/persist/etc/nixos 2>/dev/null || true
		[[ -e /mnt/tgt/mnt/persist/etc/nixos ]] || \
			sudo cp -r "$FLAKE" /mnt/tgt/mnt/persist/etc/nixos
	else
		FLAKE='/mnt/tgt/mnt/persist/etc/nixos'
		[[ -e /mnt/tgt/mnt/persist/etc/nixos ]] || \
			sudo git clone https://github.com/t184256/nix-configs \
				/mnt/tgt/mnt/persist/etc/nixos -b staging
	fi
	sudo chown -R 1000:100 /mnt/tgt/mnt/persist/etc/nixos
else
	FLAKE='github:t184256/nix-configs?ref=staging'
fi
# /etc/NetworkManager:
[[ -e /mnt/tgt/mnt/persist/etc/NetworkManager ]] || \
	sudo cp -rv /etc/NetworkManager -t /mnt/tgt/mnt/persist/etc
sudo ls -lt /mnt/tgt/mnt/persist/etc/NetworkManager
# /etc/ssh:
if [[ ! -e /mnt/tgt/mnt/persist/etc/ssh_host_rsa_key ]]; then
	sudo ssh-keygen -t rsa -b 4096 -N '' \
		-f /mnt/tgt/mnt/persist/etc/ssh_host_rsa_key
	sudo chmod 700 /mnt/tgt/mnt/persist/etc/ssh_host_rsa_key
fi
if [[ ! -e /mnt/tgt/mnt/persist/etc/ssh_host_ed25519_key ]]; then
	sudo ssh-keygen -t ed25519 -N '' \
		-f /mnt/tgt/mnt/persist/etc/ssh_host_ed25519_key
	sudo chmod 700 /mnt/tgt/mnt/persist/etc/ssh_host_ed25519_key
fi

### Installation from a flake ###

NIXOS_URL=https://cache.nixos.org?priority=200
HYDRA_URL=https://hydra.unboiled.info
NIXOS_KEY=cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
HYDRA_KEY=hydra.unboiled.info-1:c7i8vKOB30a+DaJ2M04F0EM8CPRfU+WpbqWie4n221M=
sudo nixos-install --root /mnt/tgt --no-root-password \
	--option extra-experimental-features 'cgroups nix-command flakes' \
	--option substituters "$NIXOS_URL $HYDRA_URL" \
	--option trusted-public-keys "$NIXOS_KEY $HYDRA_KEY" \
	--flake "$FLAKE#${HOST,,}"
