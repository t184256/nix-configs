#!/usr/bin/env bash
set -Eeuo pipefail; shopt -s inherit_errexit

: "${INJECT:=auto}"  # auto/force/skip
: "${PUSH:=force}"  # force/skip
: "${SECRETS_REPO_URL:=git@git.unboiled.info:monk/nix-secrets}"
: "${SECRETS_REPO_CACHE:=/tmp/.secrets-cache}"

add_to_path() { local cmd_or_drv=$1
    local cmd=$cmd_or_drv drv=$cmd_or_drv extra
    if [[ "$cmd_or_drv" =~ (.*)/bin/(.*) ]]; then
        drv=${BASH_REMATCH[1]}; cmd=${BASH_REMATCH[2]}
    fi
    if ! command -v "$cmd" >/dev/null; then
        extra=$(nix build --print-out-paths --no-link "nixpkgs#$drv")/bin
        [[ $(wc -l <<<"$extra") == 1 ]]
        PATH=$PATH:$(nix build --print-out-paths --no-link "nixpkgs#$drv")/bin
    fi
    command -v "$cmd" >/dev/null
}

add_to_path git-crypt  # git wants it in PATH for `filter`

check_status() {
    local status
    status=$(git-crypt status -u \
           | grep -vFx 'not encrypted: .git-crypt/.gitattributes' \
           | grep -vFx 'not encrypted: .gitattributes' \
           | grep -vx 'not encrypted: .git-crypt/keys/default/0/.*.gpg' \
           || true)
    [[ -z "$status" ]] || \
        { echo 1>&2 "something's wrong with the repository: $status"; exit 1; }
}

clone() {
    if [[ ! -d "$SECRETS_REPO_CACHE" ]]; then
         git clone -q --bare "$SECRETS_REPO_URL" "$SECRETS_REPO_CACHE"
    fi
    git clone -q --reference-if-able "$SECRETS_REPO_CACHE" \
              "$SECRETS_REPO_URL" "$secrets_tmp_checkout"
    pushd "$secrets_tmp_checkout" > /dev/null
    check_status
    popd > /dev/null
    echo "$secrets_tmp_checkout"
}

sanity_check_host() { local f=$1
    [[ -d "/etc/nixos/hosts/$f" ]] || \
        { echo 1>&2 "no such host '$f', aborting!"; exit 1; }
    [[ -e "/etc/nixos/hosts/$f/disko.nix" ]] || \
        { echo 1>&2 "'host $f' is not new enough, aborting!"; exit 1; }
}

find_hosts() {
    local f
    find . -maxdepth 1 | while IFS= read -r f; do
        if [[ "$f" =~ ^./(.*) ]]; then
            f=${BASH_REMATCH[1]}
        fi
        if [[ "$f" == '.' || "$f" =~ .git ]]; then
            continue
        fi
        [[ -d "$f" ]] || \
            { echo 1>&2 "top-level file '$f' found, aborting!"; exit 1; }
        sanity_check_host "$f"
        echo "$f"
    done
}

inject_secrets_to_host() { host=$1
    sanity_check_host "$host"
    rsync -r --delete-after --perms --chown=0:0 --chmod=400 \
          --exclude="@*" --delete-excluded \
          "./$host/" "root@$host:/mnt/secrets"
    if [[ -d "./$host/@storage" ]]; then
        rsync -r --delete-after --perms --chown=0:0 --chmod=400 \
              "./$host/@storage/" "root@$host:/mnt/storage/secrets"
    fi
}

commit() { local COMMIT_MSG=$1
    [[ -e .git-crypt ]]
    if [[ -n "$(git diff HEAD)" ]] \
    || [[ -n "$(git diff --staged HEAD)" ]]; then
        : "${COMMIT_MSG:=}"
        if [[ -n "$COMMIT_MSG" ]]; then
            git commit -m "$COMMIT_MSG"
        else
            git commit
        fi
    else
        echo 1>&2 'not seeing anything to commit'
    fi
    check_status
}

### building blocks of subcommands

clone_unlock() {
    echo 1>&2 -n 'cloning...'
    secrets_workdir=$(clone)
    pushd "$secrets_workdir" > /dev/null
    # https://github.com/AGWA/git-crypt/issues/69#issuecomment-1129962604
    [[ -z "$(! git config --local --get filter.git-crypt.smudge)" ]]
    echo 1>&2 -n ' unlock!'
    git-crypt unlock
    echo 1>&2
    [[ "$(git config --local --get filter.git-crypt.smudge)" == \
        'git-crypt smudge' ]]
    grep -Fq 'git-crypt' .git/config
    check_status
    popd > /dev/null
    echo "$secrets_workdir"
}

push_to_repo() {
    check_status
    if [[ "$(find . -print0 | tr '\0' '#')" =~ [[:space:]] ]]; then
        echo 1>&2 'whitespace in filenames, aborting!'
        exit 1
    fi
    git-crypt lock
    if [[ "$PUSH" != "skip" ]]; then
        echo 1>&2 'pushing repository changes...'
        git push -q
        echo 1>&2 'done, changes pushed to repository'
    else
        echo 1>&2 'not pushing repository changes due to PUSH=skip'
    fi
}

push_to_repo_if_changed() {
    if [[ -n "$(git status --porcelain)" ]] \
    || [[ -n "$(git diff origin/HEAD)" ]] \
    || [[ -n "$(git log --oneline origin/HEAD..HEAD)" ]]; then
        push_to_repo
    else
        echo 1>&2 'done, no repository changes'
    fi
}

inject_commit_and_push_changes() {
    [[ -e .git-crypt ]]
    git add ./*

    if [[ "$INJECT" != "skip" ]]; then
        local skipped=''
        find_hosts | while IFS= read -r host; do
            if [[ -n "$(git status --porcelain "$host")" ]] \
            || [[ -n "$(git diff origin/HEAD "$host")" ]] \
            || [[ -n "$(git log --oneline origin/HEAD..HEAD "$host")" ]] \
            || [[ "$INJECT" == 'force' ]]; then
                echo 1>&2 "injecting secrets to host: $host..."
                inject_secrets_to_host "$host"
            else
                skipped+=" $host"
            fi
        done
        [[ -z "$skipped" ]] || echo 1>&2 "skipped injection to:$skipped"
    else
        echo 1>&2 "not injecting anything due to INJECT=skip"
    fi

    commit "${COMMIT_MSG:-}"

    push_to_repo_if_changed
}

multifind() { local workdir=$1 path=$2
    local candidates first iter c
    # finds $workdir/*/$path files with the same contents
    candidates=$(find "$workdir"/*/"$path" -maxdepth 1 2>/dev/null)
    [[ -n "$candidates" ]] || return 1
    candidates=$(sort <<<"$candidates")
    first=$(head -n1 <<<"$candidates")
    iter=$(tr '\n' ' ' <<<"$candidates")
    [[ -r "$first" ]]
    for c in $iter; do
        [[ -r "$c" ]]
        if ! cmp -s "$first" "$c"; then
            sha256sum "$workdir"/*/"$path" 1>&2
            echo 1>&2 "There are differences between */$path! Aborting."
            exit 1
        fi
    done
    echo "$iter"
}

extend() { local workdir=$1 host=$2 path=$3
    local find_pre first find_post find_pre_extended
    find_pre=$(multifind "$workdir" "$path");
    [[ -n "$(echo $find_pre)" ]] || return 1
    first=$(tr ' ' '\n' <<<"$find_pre" | head -n1)

    mkdir -p "$(dirname "$workdir/$host/$path")"
    cat "$first" > "$workdir/$host/$path"

    find_post=$(multifind "$workdir" "$path")
    find_pre_extended=$(tr ' ' '\n' <<<"$find_pre" && \
                        echo "$workdir/$host/$path")
    find_pre_extended=$(sort <<<"$find_pre_extended")
    find_pre_extended=$(tr '\n' ' ' <<<"$find_pre_extended")
    [[ "$(echo $find_pre_extended")" == "$(echo $find_post)")" ]]
}

### subcommands

subcmd_init() {
    : "${SECRETS_REPO_URL:=$1}"
    echo 1>&2 "cloning $SECRETS_REPO_URL..."
    secrets_workdir=$(clone)
    cd "$secrets_workdir"
    echo 1>&2 "checking that it's empty..."
    [[ -z "$(git rev-list -n 1 --all)" ]] || \
        { echo 1>&2 "repository doesn't look empty!"; exit 1; }
    git-crypt init
    git-crypt add-gpg-user monk@unboiled.info
    echo '** filter=git-crypt diff=git-crypt' > .gitattributes
    echo '.gitattributes !filter !diff' >> .gitattributes
    git add .gitattributes
    git commit --amend -m 'initial commit'
    push_to_repo
    echo 1>&2 'initialized'
}

subcmd_exec() {
    workdir=$(clone_unlock)
    cd "$workdir"

    # execute the passed command
    if [[ -n "$*" ]]; then
        "$@"
        : "${COMMIT_MSG:=$*}"
    else
        (export PS1='@secrets$ ' HISTSIZE=0; bash --norc)
    fi
    inject_commit_and_push_changes "${COMMIT_MSG:-}"
}

subcmd_multiedit() { local path=$1
    local workdir find_pre first find_post c
    [[ $# == 1 ]]
    workdir=$(clone_unlock)
    cd "$workdir"

    find_pre=$(multifind "$workdir" "$path"); [[ -n "$find_pre" ]]
    first=$(tr ' ' '\n' <<<"$find_pre" | head -n1); [[ -n "$first" ]]
    "${EDITOR:-vi}" "$first"
    for c in $find_pre; do
        if [[ "$first" != "$c" ]]; then
            cat "$first" > "$c"
        fi
    done
    find_post=$(multifind "$workdir" "$path")
    [[ "$find_pre" == "$find_post" ]]
    inject_commit_and_push_changes "${COMMIT_MSG:-}"
}

subcmd_extend() { local host=$1 path=$2
    [[ $# == 2 ]]
    workdir=$(clone_unlock)
    [[ ! -e "$workdir/$host/$path" ]]
    cd "$workdir"

    extend "$workdir" "$host" "$path"
    inject_commit_and_push_changes "${COMMIT_MSG:-}"
}

subcmd_generate() { local host=$1 type=$2
    workdir=$(clone_unlock)
    add_to_path dasel
    case "$type" in
        sshd)
            COMMIT_MSG="generate ssh key for $host"
            add_to_path ssh-keygen
            mkdir -p "$workdir/$host/sshd"
            ssh-keygen -t ed25519 -N '' -C "$host" \
                       -f "$workdir/$host/sshd/ed25519"
            grep -qF 'OPENSSH PRIVATE KEY' "$workdir/$host/sshd/ed25519"
            grep -q '^ssh-ed25519' "$workdir/$host/sshd/ed25519.pub"
            dasel put -f misc/pubkeys/sshd.toml -t string \
                "$host" -v "$(cat "$workdir/$host/sshd/ed25519.pub")"
            rm "$workdir/$host/sshd/ed25519.pub"
        ;;
        login)
            local user=$3
            COMMIT_MSG="generate login password for $user@$host"
            read -rsp "enter login password for $user@$host: " PASSWORD
            echo
            read -rsp "enter login password for $user@$host, again: " PASSWORD2
            echo
            [[ "$PASSWORD" == "$PASSWORD2" ]] ||
                { echo 1>&2 "passwords did not match!"; exit 1; }
            mkdir -p "$workdir/$host/login"
            mkpasswd -s <<<"$PASSWORD" > "$workdir/$host/login/$user"
            grep -qF '$y$' "$workdir/$host/login/$user"
        ;;
        nebula)
            local int_ip=$3 int_net=192.168.99.0/24
            local pub
            add_to_path nebula/bin/nebula-cert
            pass show services/unboiled.info/nebula > "$workdir/ca.key"
            nebula-cert sign -name "$host" \
                             -ip "$int_ip/24" \
                             -subnets "$int_net" \
                             -ca-key "$workdir/ca.key" \
                             -ca-crt nixos/services/nebula/certs/ca \
                             -out-key "$workdir/$host/nebula" \
                             -out-crt "$workdir/$host/nebula.crt"
            rm "$workdir/ca.key"
            pub=$(< "$workdir/$host/nebula.crt" \
                  grep -vFx -- '-----BEGIN NEBULA CERTIFICATE-----' \
                | grep -vFx -- '-----END NEBULA CERTIFICATE-----' \
                | tr -d '\n')
            [[ "$(wc -l <<<"$pub")" == 1 ]]
            rm "$workdir/$host/nebula.crt"
            dasel put -f misc/pubkeys/nebula.toml -t string "$host" -v "$pub"
            echo 1>&2 -n "add something like \`$host = "
            echo 1>&2 "{ int = \"$int_ip\"; ext = [\"...\"]; };\`"
            echo 1>&2 'to /etc/nixos/nixos/services/nebula/default.nix'
            echo 1>&2 'and import ../../nixos/services/nebula'
        ;;
        syncthing)
            local pub
            add_to_path syncthing
            keydir="$workdir/$host/@storage/syncthing-tmp"
            genout=$(syncthing --generate "$keydir" | grep -F 'Device ID: ')
            [[ "$genout" =~ ([A-Z0-9]{7}-){7}[A-Z0-9]{7}$ ]]
            device_id=${BASH_REMATCH[0]}
            pushd "$keydir" > /dev/null
            tar cf "$workdir/$host/@storage/syncthing" key.pem cert.pem
            rm config.xml key.pem cert.pem
            popd > /dev/null
            rm -d "$keydir"
            dasel put -f misc/pubkeys/syncthing.toml \
                -t string "$host" -v "$device_id"
            if find "$workdir"/*/"@storage/syncthing-relays" &>/dev/null; then
                extend "$workdir" "$host" "@storage/syncthing-relays"
            else
                echo 1>&2 "no */@storage/syncthing-relays found, skipping..."
            fi
        ;;
        garage)
            add_to_path openssl.bin/bin/openssl
            add_to_path xxd
            gdir="$workdir/$host/@storage/garage"
            mkdir -p "$gdir"
            openssl genpkey -algorithm ed25519 -outform der >"$gdir/priv.der"
            openssl pkey -outform der -pubout <"$gdir/priv.der" >"$gdir/pub.der"
            tail -c32 "$gdir/priv.der" >"$gdir/priv"
            tail -c32 "$gdir/pub.der" >"$gdir/pub"
            cat "$gdir/pub" >>"$gdir/priv"  # yeah, really
            local pubhex
            pubhex=$(xxd -p -cols 32 "$gdir/pub")
            [[ "$(wc -c <<<"$pubhex")" == 65 ]]  # trailing newline
            rm "$gdir/priv.der" "$gdir/pub.der" "$gdir/pub"
            extend "$workdir" "$host" "@storage/garage/rpc" || \
                openssl rand 32 | xxd -p -cols 32 > "$gdir/rpc"
            [[ "$(wc -c <"$gdir/rpc")" == 65 ]]  # trailing newline
            dasel put -f misc/pubkeys/garage.toml -t string "$host" -v "$pubhex"
        ;;
        *)
            echo 1>&2 "wait, how does one generate '$2'?"; exit 1;
        ;;
    esac
    cd "$workdir"
    inject_commit_and_push_changes "${COMMIT_MSG:-}"
}

subcmd_inject() {
    workdir=$(clone_unlock)
    cd "$workdir"
    for host in "$@"; do
        echo 1>&2 "injecting secrets to host: $host..."
        inject_secrets_to_host "$host"
    done
}

subcmd_inject_to_dir() { local host=$1 tgt_dir=$2
    workdir=$(clone_unlock)
    rsync -r --perms --chmod=D700,F400 --exclude="$workdir/$host/@*" \
        "$workdir/$host/" "$tgt_dir"
    # @storage is skipped, on purpose
}

subcmd_slurp() {
    workdir=$(clone_unlock)
    cd "$workdir"
    for host in "$@"; do
        [[ "$(dirname "$(realpath "./$host")")" == "$workdir" ]]
        sanity_check_host "$host"
        mkdir -p "./$host"
        echo 1>&2 "slurping secrets from host: $host..."
        rsync -r --delete-after --perms --chmod=D700,F400 \
              "root@$host:/mnt/secrets/" "./$host"
        if ssh "$host" '[ -d /mnt/storage/secrets ]'; then
            mkdir -p "./$host/@storage"
            rsync -r --delete-after --perms --chmod=D700,F400 \
                  "root@$host:/mnt/storage/secrets/" "./$host/@storage"
        fi
        git add "./$host"
    done
    commit "import from $*"
    push_to_repo_if_changed
}

### subcommands dispatcher

# doesn't work in a function
secrets_tmp_checkout=$(mktemp -d)
trap 'rm -rf $secrets_tmp_checkout' EXIT

subcommand=$1; shift
case "$subcommand" in
    init)
        subcmd_init "$@"
        ;;
    exec)
        subcmd_exec "$@"
        ;;
    edit)
        COMMIT_MSG="edit $*" subcmd_exec "${EDITOR:-vi}" "$@"
        ;;
    vi)
        COMMIT_MSG="edit $*" subcmd_exec vi "$@"
        ;;
    multiedit)
        COMMIT_MSG="edit */$1" subcmd_multiedit "$1"
        ;;
    extend)
        COMMIT_MSG="extend */$2 to $1" subcmd_extend "$1" "$2"
        ;;
    generate)
        COMMIT_MSG="generate $*" subcmd_generate "$@"
        ;;
    inject)
        subcmd_inject "$@"
        ;;
    inject-to-dir)
        subcmd_inject_to_dir "$@"
        ;;
    slurp)
        subcmd_slurp "$@"
        ;;
    *)
        echo 1>&2 "subcommand '$subcommand' does not exist!"; exit 1;
        ;;
esac
